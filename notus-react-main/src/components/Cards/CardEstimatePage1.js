import React, { useState, useEffect, useCallback } from "react";

function CardEstimatePage1({ formData, onChange, errors, onNext, mode }) {
  const [previousEstimates, setPreviousEstimates] = useState([]);
  const [autoGeneratedEstimateNo, setAutoGeneratedEstimateNo] = useState("");

  // Memoize fetchEstimateDetails to make it a stable reference
  const fetchEstimateDetails = useCallback((estimateNo) => {
    console.log("Fetching details for estimateNo:", estimateNo);
    fetch(`http://localhost:8082/api/pcesthtt/estimate/${estimateNo}`)
      .then((response) => {
        if (!response.ok) {
          console.error("Network response error:", response.status, response.statusText);
          throw new Error("Network response was not ok");
        }
        return response.json();
      })
      .then((data) => {
        console.log("Fetched estimate details:", data);
        if (!data.error) {
          onChange({ target: { id: "costCenter", value: data.projectNo || "" } });
          onChange({ target: { id: "estimateDt", value: data.etimateDt ? data.etimateDt.split("T")[0] : "" } });
          onChange({ target: { id: "fileRef", value: data.omsRefNo || "" } });
          onChange({ target: { id: "rejectReason", value: data.rejectReason || "" } });
          onChange({ target: { id: "esName", value: data.clientNm || "" } });
          onChange({ target: { id: "descr", value: data.descr || "" } });
          console.log("Updated formData:", formData);
        } else {
          console.error("Error in response:", data.error);
          onChange({ target: { id: "costCenter", value: "" } });
          onChange({ target: { id: "estimateDt", value: "" } });
          onChange({ target: { id: "fileRef", value: "" } });
          onChange({ target: { id: "rejectReason", value: "" } });
          onChange({ target: { id: "esName", value: "" } });
          onChange({ target: { id: "descr", value: "" } });
        }
      })
      .catch((error) => {
        console.error("Error fetching estimate details:", error);
        onChange({ target: { id: "costCenter", value: "" } });
        onChange({ target: { id: "estimateDt", value: "" } });
        onChange({ target: { id: "fileRef", value: "" } });
        onChange({ target: { id: "rejectReason", value: "" } });
        onChange({ target: { id: "esName", value: "" } });
        onChange({ target: { id: "descr", value: "" } });
      });
  }, [onChange, formData]); // Dependencies for fetchEstimateDetails

  useEffect(() => {
    if (mode === "modify") {
      fetch("http://localhost:8082/api/pcesthtt/estimateNos")
        .then((response) => {
          if (!response.ok) throw new Error("Failed to fetch estimate numbers");
          return response.json();
        })
        .then((data) => {
          console.log("Fetched estimate numbers:", data);
          setPreviousEstimates(data);
          if (formData.estimateNo) {
            fetchEstimateDetails(formData.estimateNo);
          }
        })
        .catch((error) => {
          console.error("Error fetching estimate numbers:", error);
          setPreviousEstimates([]);
        });
    } else {
      setPreviousEstimates([]);
    }
  }, [mode, formData.estimateNo, fetchEstimateDetails]); // Added fetchEstimateDetails to dependency array

  const generateEstimateNumber = () => {
    const prefix = "600.41";
    const section = "CN";
    const year = new Date().getFullYear().toString().slice(-2);
    const sequence = Math.floor(Math.random() * 9999) + 1;
    const paddedSequence = sequence.toString().padStart(4, "0");
    return `${prefix}/${section}/${year}/${paddedSequence}`;
  };

  useEffect(() => {
    if (mode === "new") {
      const newEstimateNo = generateEstimateNumber();
      setAutoGeneratedEstimateNo(newEstimateNo);
      onChange({ target: { id: "estimateNo", value: newEstimateNo } });
    } else if (mode === "modify" && formData.estimateNo) {
      setAutoGeneratedEstimateNo("");
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mode, onChange]); // Intentionally excluding formData.estimateNo

  return (
    <div className="flex-auto px-4 lg:px-10 py-10 pt-0">
      <form
        onSubmit={(e) => {
          e.preventDefault();
          onNext();
        }}
      >
        <div className="flex flex-wrap">
          <div className="w-full lg:w-6/12 px-4">
            <div className="relative w-full mb-3">
              <label
                className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                htmlFor="estimateNo"
              >
                Estimate No
              </label>
              {mode === "new" ? (
                <input
                  type="text"
                  id="estimateNo"
                  className={`border-0 px-3 py-3 bg-white rounded shadow focus:outline-none focus:ring w-full ${
                    errors.estimateNo ? "border-red-500" : ""
                  }`}
                  value={formData.estimateNo || autoGeneratedEstimateNo}
                  readOnly
                />
              ) : (
                <select
                  id="estimateNo"
                  className={`border-0 px-3 py-3 bg-white rounded shadow focus:outline-none focus:ring w-full ${
                    errors.estimateNo ? "border-red-500" : ""
                  }`}
                  value={formData.estimateNo || ""}
                  onChange={(e) => {
                    onChange(e);
                    fetchEstimateDetails(e.target.value);
                  }}
                >
                  <option value="">--Select--</option>
                  {previousEstimates.map((estimate, index) => (
                    <option key={index} value={estimate}>
                      {estimate}
                    </option>
                  ))}
                </select>
              )}
              {errors.estimateNo && (
                <p className="text-red-500 text-xs mt-1">{errors.estimateNo}</p>
              )}
            </div>
          </div>

          <div className="w-full lg:w-6/12 px-4">
            <div className="relative w-full mb-3">
              <label
                className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                htmlFor="costCenter"
              >
                Cost Center (Project No)
              </label>
              <input
                type="text"
                id="costCenter"
                className={`border-0 px-3 py-3 bg-white rounded shadow focus:outline-none focus:ring w-full ${
                  errors.costCenter ? "border-red-500" : ""
                }`}
                value={formData.costCenter || ""}
                onChange={onChange}
                placeholder="Enter Cost Center"
                required
              />
              {errors.costCenter && (
                <p className="text-red-500 text-xs mt-1">{errors.costCenter}</p>
              )}
            </div>
          </div>

          <div className="w-full lg:w-6/12 px-4">
            <div className="relative w-full mb-3">
              <label
                className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                htmlFor="warehouse"
              >
                Warehouse
              </label>
              <select
                id="warehouse"
                className="border-0 px-3 py-3 bg-white rounded shadow focus:outline-none focus:ring w-full"
                value={formData.warehouse || ""}
                onChange={onChange}
                required
              >
                <option value="">--Select--</option>
                <option value="600.43">600.43</option>
                <option value="600.44">600.44</option>
                <option value="600.45">600.45</option>
              </select>
            </div>
          </div>

          <div className="w-full lg:w-6/12 px-4">
            <div className="relative w-full mb-3">
              <label
                className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                htmlFor="estimateDt"
              >
                Estimate Date
              </label>
              <input
                type="date"
                id="estimateDt"
                className={`border-0 px-3 py-3 bg-white rounded shadow focus:outline-none focus:ring w-full ${
                  errors.estimateDt ? "border-red-500" : ""
                }`}
                value={formData.estimateDt || ""}
                onChange={onChange}
                required
              />
              {errors.estimateDt && (
                <p className="text-red-500 text-xs mt-1">{errors.estimateDt}</p>
              )}
            </div>
          </div>

          <div className="w-full lg:w-6/12 px-4">
            <div className="relative w-full mb-3">
              <label
                className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                htmlFor="fileRef"
              >
                File Reference
              </label>
              <input
                type="text"
                id="fileRef"
                className={`border-0 px-3 py-3 bg-white rounded shadow focus:outline-none focus:ring w-full ${
                  errors.fileRef ? "border-red-500" : ""
                }`}
                value={formData.fileRef || ""}
                onChange={onChange}
                placeholder="Enter File Reference"
                required
              />
              {errors.fileRef && (
                <p className="text-red-500 text-xs mt-1">{errors.fileRef}</p>
              )}
            </div>
          </div>

          <div className="w-full lg:w-6/12 px-4">
            <div className="relative w-full mb-3">
              <label
                className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                htmlFor="rejectReason"
              >
                Reject Reason
              </label>
              <input
                type="text"
                id="rejectReason"
                className="border-0 px-3 py-3 bg-white rounded shadow focus:outline-none focus:ring w-full"
                value={formData.rejectReason || ""}
                onChange={onChange}
                placeholder="Enter Reject Reason"
              />
            </div>
          </div>

          <div className="w-full lg:w-6/12 px-4">
            <div className="relative w-full mb-3">
              <label
                className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                htmlFor="esName"
              >
                Client Name
              </label>
              <input
                type="text"
                id="esName"
                className="border-0 px-3 py-3 bg-white rounded shadow focus:outline-none focus:ring w-full"
                value={formData.esName || ""}
                onChange={onChange}
                placeholder="Enter Client Name"
                required
              />
            </div>
          </div>

          <div className="w-full lg:w-12/12 px-4">
            <div className="relative w-full mb-3">
              <label
                className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                htmlFor="descr"
              >
                Description
              </label>
              <textarea
                id="descr"
                className="border-0 px-3 py-3 bg-white rounded shadow focus:outline-none focus:ring w-full h-48 resize-vertical"
                value={formData.descr || ""}
                onChange={onChange}
                placeholder="Enter Description"
                required
              />
            </div>
          </div>
        </div>
      </form>
    </div>
  );
}

export default CardEstimatePage1;